import discord
import os
from dotenv import load_dotenv
import asyncio
from datetime import timedelta, datetime
from discord.ext import commands, tasks
import logging
from zoneinfo import ZoneInfo  # Python 3.9+ (ou utilisez pytz pour versions ant√©rieures)

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    filename='/home/discord/discord-bot.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Constantes
POLL_CREATION_HOUR = 18
POLL_CREATION_MINUTE = 0
POLL_DELETION_HOUR = 0
POLL_DELETION_MINUTE = 0
BOSS_EVENT_HOUR = 20
BOSS_EVENT_MINUTE = 30
SIEGE_EVENT_HOUR = 14
SIEGE_EVENT_MINUTE = 30
TIMEZONE = "Europe/Paris"

class BotState:
    """Classe pour encapsuler l'√©tat du bot avec am√©liorations"""
    def __init__(self):
        self.poll_message = None
        self.text_message = None
        # S√©parer les messages d'√©v√©nements
        self.boss_event_messages = []
        self.siege_event_messages = []
        # Tracking des derni√®res ex√©cutions pour √©viter les doublons
        self.last_poll_creation = None
        self.last_poll_deletion = None
        self.last_boss_event = None
        self.last_siege_event = None

# Cr√©er le bot avec les intents n√©cessaires
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Instance de l'√©tat du bot
bot_state = BotState()

# V√©rification et r√©cup√©ration des variables d'environnement
def get_env_variables():
    """R√©cup√®re et valide les variables d'environnement"""
    required_vars = {
        'TOKEN_DISCORD': os.getenv('TOKEN_DISCORD'),
        'CHANNEL_ID_DP': os.getenv('CHANNEL_ID_DP'),
        'CHANNEL_ID_BOSS': os.getenv('CHANNEL_ID_BOSS'),
        'CHANNEL_ID_SIEGE': os.getenv('CHANNEL_ID_SIEGE')
    }
    
    for var_name, var_value in required_vars.items():
        if not var_value:
            logging.error(f"Variable d'environnement {var_name} non d√©finie dans .env")
            raise ValueError(f"Variable d'environnement manquante: {var_name}")
    
    return required_vars

# R√©cup√©rer les variables d'environnement
try:
    env_vars = get_env_variables()
    CHANNEL_ID_DP = int(env_vars['CHANNEL_ID_DP'])
    CHANNEL_ID_BOSS = int(env_vars['CHANNEL_ID_BOSS'])
    CHANNEL_ID_SIEGE = int(env_vars['CHANNEL_ID_SIEGE'])
    TOKEN_DISCORD = env_vars['TOKEN_DISCORD']
except (ValueError, TypeError) as e:
    logging.error(f"Erreur de configuration: {e}")
    exit(1)

def get_current_time():
    """Retourne l'heure actuelle dans le timezone configur√©"""
    return datetime.now(ZoneInfo(TIMEZONE))

async def recover_existing_messages():
    """R√©cup√®re les messages existants au red√©marrage du bot"""
    try:
        # R√©cup√©rer les sondages existants
        dp_channel = bot.get_channel(CHANNEL_ID_DP)
        if dp_channel:
            async for message in dp_channel.history(limit=50):
                if message.author == bot.user:
                    if message.poll and not bot_state.poll_message:
                        bot_state.poll_message = message
                        logging.info(f"Sondage r√©cup√©r√©: {message.id}")
                    elif "‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è" in message.content and not bot_state.text_message:
                        bot_state.text_message = message
                        logging.info(f"Message texte r√©cup√©r√©: {message.id}")
        
        # R√©cup√©rer les messages d'√©v√©nements boss
        boss_channel = bot.get_channel(CHANNEL_ID_BOSS)
        if boss_channel:
            async for message in boss_channel.history(limit=10):
                if message.author == bot.user and "‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è" in message.content:
                    bot_state.boss_event_messages.append(message)
                    logging.info(f"Message boss r√©cup√©r√©: {message.id}")
        
        # R√©cup√©rer les messages d'√©v√©nements siege
        siege_channel = bot.get_channel(CHANNEL_ID_SIEGE)
        if siege_channel:
            async for message in siege_channel.history(limit=10):
                if message.author == bot.user and "‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è" in message.content:
                    bot_state.siege_event_messages.append(message)
                    logging.info(f"Message siege r√©cup√©r√©: {message.id}")
                    
        logging.info("R√©cup√©ration des messages termin√©e")
        
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration des messages: {e}")

async def create_poll():
    """Cr√©er un sondage avec la nouvelle API Poll Resource"""
    global bot_state

    channel = bot.get_channel(CHANNEL_ID_DP)
    if not channel:
        logging.error(f"Impossible de trouver le canal {CHANNEL_ID_DP}.")
        return

    try:
        # Supprimer les anciens messages s'ils existent
        await delete_poll_messages()

        poll = discord.Poll(
            question="Pr√©sence pour le üë•Donjon Partyüë• du soir √† 21h (heure de Paris) - 15h (heure du Qu√©bec).",
            duration=timedelta(hours=8)
        )

        poll.add_answer(text="Oui", emoji="‚úÖ")
        poll.add_answer(text="Non", emoji="‚ùå")

        bot_state.poll_message = await channel.send(poll=poll)
        logging.info("Sondage cr√©√© avec succ√®s !")

        bot_state.text_message = await channel.send("‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è@everyone‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è")
        logging.info("Message texte cr√©√© avec succ√®s !")

    except discord.DiscordException as e:
        logging.error(f"Erreur lors de la cr√©ation du sondage : {e}")

async def send_boss_event():
    """G√©rer sp√©cifiquement les √©v√©nements boss"""
    await send_event_message(
        CHANNEL_ID_BOSS, 
        bot_state.boss_event_messages, 
        "‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è@everyone‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è"
    )

async def send_siege_event():
    """G√©rer sp√©cifiquement les √©v√©nements siege"""
    await send_event_message(
        CHANNEL_ID_SIEGE, 
        bot_state.siege_event_messages, 
        "‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è@everyone‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è"
    )

async def send_event_message(channel_id, message_list, event_message):
    """Fonction g√©n√©rique pour g√©rer les √©v√©nements"""
    channel = bot.get_channel(channel_id)
    if not channel:
        logging.error(f"Impossible de trouver le canal {channel_id}.")
        return

    try:
        # Supprimer les messages pr√©c√©dents de l'√©v√©nement
        await delete_messages(message_list)
        
        # Envoyer un nouveau message
        message = await channel.send(event_message)
        message_list.append(message)
        logging.info(f"Message de l'√©v√©nement envoy√© avec succ√®s dans le canal {channel_id} !")
        
    except discord.DiscordException as e:
        logging.error(f"Erreur lors de l'envoi du message de l'√©v√©nement : {e}")

async def delete_messages(message_list):
    """Supprimer une liste de messages"""
    for msg in message_list[:]:  # Copie pour √©viter les modifications durant l'it√©ration
        if msg:
            try:
                await msg.delete()
                message_list.remove(msg)
                logging.info(f"Message supprim√© : {msg.id}")
            except discord.DiscordException as e:
                logging.error(f"Erreur lors de la suppression du message {msg.id if msg else 'None'} : {e}")

async def delete_poll_messages():
    """Supprimer les messages de sondage et texte"""
    global bot_state
    
    messages_to_delete = []
    if bot_state.poll_message:
        messages_to_delete.append(bot_state.poll_message)
    if bot_state.text_message:
        messages_to_delete.append(bot_state.text_message)
    
    if messages_to_delete:
        await delete_messages(messages_to_delete)
        bot_state.poll_message = None
        bot_state.text_message = None

@tasks.loop(minutes=1)
async def schedule_checker():
    """V√©rificateur de planning principal avec protection contre les doublons"""
    now = get_current_time()
    current_date = now.date()
    current_datetime = now.replace(second=0, microsecond=0)  # Pour comparaison pr√©cise
    
    # Cr√©ation du sondage quotidien √† 18:00 (avec protection doublon)
    if (now.hour == POLL_CREATION_HOUR and now.minute == POLL_CREATION_MINUTE 
        and bot_state.last_poll_creation != current_date):
        await create_poll()
        bot_state.last_poll_creation = current_date
        logging.info("Sondage et message texte cr√©√©s √† 18:00 !")
    
    # Suppression du sondage quotidien √† 00:00 (avec protection doublon)
    elif (now.hour == POLL_DELETION_HOUR and now.minute == POLL_DELETION_MINUTE
          and bot_state.last_poll_deletion != current_date):
        await delete_poll_messages()
        bot_state.last_poll_deletion = current_date
        logging.info("Messages de sondage supprim√©s √† 00:00 !")
    
    # √âv√©nement boss les samedis et dimanches √† 20:30 (avec protection doublon)
    elif (now.weekday() in [5, 6] and 
          now.hour == BOSS_EVENT_HOUR and 
          now.minute == BOSS_EVENT_MINUTE and
          bot_state.last_boss_event != current_datetime):
        await send_boss_event()
        bot_state.last_boss_event = current_datetime
        logging.info("Message boss envoy√© pour le week-end !")
    
    # √âv√©nement siege les dimanches √† 14:30 (avec protection doublon)
    elif (now.weekday() == 6 and 
          now.hour == SIEGE_EVENT_HOUR and 
          now.minute == SIEGE_EVENT_MINUTE and
          bot_state.last_siege_event != current_datetime):
        await send_siege_event()
        bot_state.last_siege_event = current_datetime
        logging.info("Message siege envoy√© pour le dimanche !")

@schedule_checker.before_loop
async def before_schedule_checker():
    """Attendre que le bot soit pr√™t avant de d√©marrer les t√¢ches"""
    await bot.wait_until_ready()

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot est pr√™t"""
    logging.info(f"Bot connect√© en tant que {bot.user}")
    
    # R√©cup√©rer les messages existants
    await recover_existing_messages()
    
    # D√©marrer le v√©rificateur de planning
    if not schedule_checker.is_running():
        schedule_checker.start()
        logging.info("T√¢ches de planning d√©marr√©es !")

@bot.event
async def on_error(event, *args, **kwargs):
    """Gestionnaire d'erreurs global"""
    logging.error(f"Erreur dans l'√©v√©nement {event}: {args}, {kwargs}")

# Commandes existantes am√©lior√©es
@bot.command(name='test')
@commands.has_permissions(administrator=True)
async def test_command(ctx):
    """Commande de test pour les administrateurs"""
    await ctx.send("Bot fonctionnel ! ‚úÖ")

@bot.command(name='status')
@commands.has_permissions(administrator=True)
async def status_command(ctx):
    """Affiche le statut complet du bot"""
    now = get_current_time()
    status_msg = f"""
**Statut du Bot** ü§ñ
**Heure actuelle:** {now.strftime('%H:%M:%S (%d/%m/%Y)')}
**Sondage actif:** {'Oui' if bot_state.poll_message else 'Non'}
**Messages boss:** {len(bot_state.boss_event_messages)}
**Messages siege:** {len(bot_state.siege_event_messages)}
**T√¢ches actives:** {'Oui' if schedule_checker.is_running() else 'Non'}

**Derni√®res ex√©cutions:**
‚Ä¢ Sondage cr√©√©: {bot_state.last_poll_creation or 'Jamais'}
‚Ä¢ Sondage supprim√©: {bot_state.last_poll_deletion or 'Jamais'}
‚Ä¢ Boss event: {bot_state.last_boss_event or 'Jamais'}
‚Ä¢ Siege event: {bot_state.last_siege_event or 'Jamais'}
    """
    await ctx.send(status_msg)

# Nouvelles commandes administratives
@bot.command(name='force_poll')
@commands.has_permissions(administrator=True)
async def force_poll(ctx):
    """Force la cr√©ation d'un sondage manuellement"""
    await create_poll()
    await ctx.send("‚úÖ Sondage cr√©√© manuellement !")
    logging.info(f"Sondage cr√©√© manuellement par {ctx.author}")

@bot.command(name='force_boss')
@commands.has_permissions(administrator=True)
async def force_boss(ctx):
    """Force l'envoi d'un message boss"""
    await send_boss_event()
    await ctx.send("‚úÖ Message boss envoy√© manuellement !")
    logging.info(f"Message boss cr√©√© manuellement par {ctx.author}")

@bot.command(name='force_siege')
@commands.has_permissions(administrator=True)
async def force_siege(ctx):
    """Force l'envoi d'un message siege"""
    await send_siege_event()
    await ctx.send("‚úÖ Message siege envoy√© manuellement !")
    logging.info(f"Message siege cr√©√© manuellement par {ctx.author}")

@bot.command(name='clean_poll')
@commands.has_permissions(administrator=True)
async def clean_poll(ctx):
    """Nettoie les messages de sondage"""
    await delete_poll_messages()
    await ctx.send("‚úÖ Messages de sondage nettoy√©s !")
    logging.info(f"Messages de sondage nettoy√©s par {ctx.author}")

@bot.command(name='clean_events')
@commands.has_permissions(administrator=True)
async def clean_events(ctx):
    """Nettoie tous les messages d'√©v√©nements"""
    await delete_messages(bot_state.boss_event_messages)
    await delete_messages(bot_state.siege_event_messages)
    await ctx.send("‚úÖ Messages d'√©v√©nements nettoy√©s !")
    logging.info(f"Messages d'√©v√©nements nettoy√©s par {ctx.author}")

@bot.command(name='clean_all')
@commands.has_permissions(administrator=True)
async def clean_all(ctx):
    """Nettoie tous les messages du bot"""
    await delete_poll_messages()
    await delete_messages(bot_state.boss_event_messages)
    await delete_messages(bot_state.siege_event_messages)
    await ctx.send("‚úÖ Tous les messages nettoy√©s !")
    logging.info(f"Tous les messages nettoy√©s par {ctx.author}")

@bot.command(name='recover')
@commands.has_permissions(administrator=True)
async def recover_command(ctx):
    """R√©cup√®re les messages existants manuellement"""
    await recover_existing_messages()
    await ctx.send("‚úÖ R√©cup√©ration des messages termin√©e !")
    logging.info(f"R√©cup√©ration manuelle lanc√©e par {ctx.author}")

@bot.command(name='help_admin')
@commands.has_permissions(administrator=True)
async def help_admin(ctx):
    """Affiche l'aide pour les commandes administrateur"""
    help_msg = """
**Commandes Administrateur** üîß

**Gestion des sondages:**
‚Ä¢ `!force_poll` - Cr√©er un sondage manuellement
‚Ä¢ `!clean_poll` - Supprimer les messages de sondage

**Gestion des √©v√©nements:**
‚Ä¢ `!force_boss` - Envoyer un message boss
‚Ä¢ `!force_siege` - Envoyer un message siege
‚Ä¢ `!clean_events` - Supprimer tous les messages d'√©v√©nements

**Utilitaires:**
‚Ä¢ `!status` - Voir le statut du bot
‚Ä¢ `!recover` - R√©cup√©rer les messages existants
‚Ä¢ `!clean_all` - Nettoyer tous les messages
‚Ä¢ `!test` - Test de fonctionnement
    """
    await ctx.send(help_msg)

# Gestionnaire d'erreur pour les commandes
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires.")
    elif isinstance(error, commands.CommandNotFound):
        # Ignorer les commandes inconnues pour √©viter le spam
        pass
    else:
        logging.error(f"Erreur de commande: {error}")
        await ctx.send("‚ùå Une erreur s'est produite lors de l'ex√©cution de la commande.")

if __name__ == "__main__":
    try:
        bot.run(TOKEN_DISCORD)
    except Exception as e:
        logging.error(f"Erreur critique lors du d√©marrage du bot: {e}")
